# -*- coding: utf-8 -*-
"""Incremental Capstone.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TXP4XLN3RT6Dh6MEqZ9mxjCcpcaAtAYC

- **Incremental Capstone Session 1 - EDA**
--  https://docs.google.com/document/d/1juwIQDA61MFuKoR0U9Pd2u8C6hBNAoJq/edit?tab=t.0

- **NSMES1988 - NSMES1988.csv **
-- https://drive.google.com/drive/folders/1Bs-qDfJFSMKIpC_rFs2f-LmLougXonf-

- Team Member(s):
- - Carllos Watts-Nogueira
- - Ranjan Baral

- Room number: 8

- May, 22 2025

# Task A
"""

# 1) Import Python libraries.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# 2) Import the CSV file → NSMES1988.csv into a dataframe.
df = pd.read_csv('NSMES1988 - NSMES1988.csv')
df

# 3) Check for missing values in the data.
df.isnull().sum() #None, NaN

# 4) Perform memory analysis of the dataframe and mark your comments. (see comments below, on the summary)
# 4.1) describe()
df.describe()

# 4) Perform memory analysis of the dataframe and mark your comments. (see comments below, on the summary)
# 4.2) info()
df.info()

# 5) Perform the following operations on the columns.
# 5.1) Rename any nondescript columns to be more specific.
df = df.rename(columns={'Unnamed: 0': 'id'})
df

# 5) Perform the following operations on the columns.
# 5.2) Multiply age by 10 and income by 10000.
df['age'] = df['age'] * 10
df['income'] = df['income'] * 10000
df

# 5) Perform the following operations on the columns.
# 5.3) Would any column benefit from changing data types?
# 5.3.1) Indicate possible data type changes, in the report.
df['age'] = df['age'].astype('int16')
df

# 6) Save the dataframe as ‘NSMES1988_updated.csv’ file in the local space for future use.
df.to_csv('NSMES1988_updated.csv')

# 7) Perform basic statistical analysis on your dataframe and generate a brief report on the outcome.
# 7.1) mean()
# Way: using the all df, but filter by numeric_only=True, for make sure not return error, with the dtypes different numbers.
mean_value = df.mean(numeric_only=True)
mean_value

# Way: using selected columns numbers, (Int and Float) - Manual
# df[['age', 'income', 'visits', 'nvisits', 'ovisits', 'novisits', 'emergency', 'hospital', 'chronic', 'age', 'school', 'income']].mean()

# Researh
# JD_02_Pandas_DataFrame.ipynb
# https://pandas.pydata.org/docs/getting_started/intro_tutorials/06_calculate_statistics.html
# https://pandas.pydata.org/docs/user_guide/basics.html#essential-basic-functionality

# 7) Perform basic statistical analysis on your dataframe and generate a brief report on the outcome.
# 7.2) median()

median_value = df.median(numeric_only=True)
median_value

# df[['age', 'income', 'visits', 'nvisits', 'ovisits', 'novisits', 'emergency', 'hospital', 'chronic', 'age', 'school', 'income']].median()

# 7) Perform basic statistical analysis on your dataframe and generate a brief report on the outcome.
# 7.3) std()

std_deviation = df.std(numeric_only=True)
std_deviation

# df[['age', 'income', 'visits', 'nvisits', 'ovisits', 'novisits', 'emergency', 'hospital', 'chronic', 'age', 'school', 'income']].std()

# 7) Perform basic statistical analysis on your dataframe and generate a brief report on the outcome.
# 7.4) value_counts() by health --> dtype: object
df['health'].value_counts()

# value_counts, method counts the number of records for each category in a column.

# 7) Perform basic statistical analysis on your dataframe and generate a brief report on the outcome.
# 7.5) value_counts() by adl --> dtype: object
df['adl'].value_counts()

# 7) Perform basic statistical analysis on your dataframe and generate a brief report on the outcome.
# 7.6) value_counts() by region --> dtype: object
df['region'].value_counts()

# 7) Perform basic statistical analysis on your dataframe and generate a brief report on the outcome.
# 7.7) value_counts() by gender --> dtype: object
df['gender'].value_counts()

# 7) Perform basic statistical analysis on your dataframe and generate a brief report on the outcome.
# 7.8) value_counts() by married --> dtype: object
df['married'].value_counts()

# 7) Perform basic statistical analysis on your dataframe and generate a brief report on the outcome.
# 7.9) value_counts() by employed --> dtype: object
df['employed'].value_counts()

# 7) Perform basic statistical analysis on your dataframe and generate a brief report on the outcome.
# 7.10) value_counts() by insurance --> dtype: object
df['insurance'].value_counts()

# 7) Perform basic statistical analysis on your dataframe and generate a brief report on the outcome.
# 7.11) value_counts() by medicaid --> dtype: object
df['medicaid'].value_counts()

# 7) Perform basic statistical analysis on your dataframe and generate a brief report on the outcome.
# 7.12) value_counts() groupby health then adl,	region,	gender,	married,	employed,	insurance	medicaid	 --> dtypes: object
df[['health', 'adl', 'region', 'gender', 'married', 'employed', 'insurance', 'medicaid']].value_counts()

# 8) Invoke describe command on the dataframe and compare that with the basic statistical  analysis done in the previous step.
df.describe()

# 9) Indicate which of the columns are not eligible for statistical analysis.
df.info()

# ['health', 'adl', 'region', 'gender', 'married', 'employed', 'insurance', 'medicaid']
# all this columns dtypes=object

# Understanding data by range income data
bins_inc = [0, 15000, 30000, 50000, 70000, 100000]  # Define ranges
labels_inc = ['0-15K', '15K-30K', '30K-50K', '50K-70K', '70K-100K']  # Labels for bins

# Categorize income into bins
df2 = df.copy() #create new df2 for add new colum 'income_group'
df2['income_group'] = pd.cut(df['income'], bins=bins_inc, labels=labels_inc, right=False)

# Count occurrences in each bin
print(df2['income_group'].value_counts())

# 7) Understanding data by range age data
bins_age = [60, 70, 80, 90, 100, 110]  # Define ranges
labels_age = ['60-69', '70-79', '80-89', '90-99', '100-109']  # Labels for bins

df2['age_group'] = pd.cut(df['age'], bins=bins_age, labels=labels_age, right=False)

df2['age_group'].value_counts().sort_index(ascending=True) #sort_values

# Understanding data with groupby age
df2.groupby(["age_group"]).mean(numeric_only=True)

# Understanding data with groupby age and count() age.
df2.groupby("age")["age"].count()

# Understanding data with groupby age and region and count() age.
df2.groupby(["age", "region"])["age"].count()
# df2

# Saving data on new df2 csv
df2.to_csv('df2_updated.csv')

# Understanding negatives income values
df3 = df.copy()
# df3 = df3['income'] < 0 # this way return bool --> False or True.
df3 = df[df['income'] < 0]  # Filter rows where income is negative.

# Select rows 909, 910, and 2592
selected_rows = df3.loc[[909, 910, 2592]]
print(selected_rows)

"""# Summary Task A

**data**


```
Unnamed: 0          = id
visits              = number int
nvisits             = number int
ovisits             = number int
novisits            = number int
emergency           = number int
hospital            = number int total days, stays in general?
health              = string (poor, avarege, excellent)
chronic             = number int
adl	                = string (normal, limited)
region	            = string (other)
age	                = number int
gender	            = string (male, or female)
married	            = string (yes or no)
school	            = number int
income	            = number float ($USD)
employed	          = string (yes or no)
insurance	          = string (yes or no)
medicaid            = string (yes or no)
```

Task A

1) Import Python libraries.
- yes.

2) Import the CSV file → NSMES1988.csv into a dataframe.
- yes.

3) Check for missing values in the data.
- yes,no data missing.

4) Perform memory analysis of the dataframe and mark your comments.
- yes. describe() and info()
- 3 incame: -10125.000000 negative?

- before changes, dtype, memory
- - dtypes: float64(2), int64(9), object(8)
- - memory usage: 654.1+ KB
- after changes, dtype, memory
- - dtypes: float64(1), int16(1), int64(9), object(8)
- - memory usage: 628.3+ KB

5) Perform the following operations on the columns.

    5.1) Rename any nondescript columns to be more specific.
    - yes,[Unnamed: 0] to [id]

    5.2) Multiply age by 10 and income by 10000.
    - yes.

    5.3) Would any column benefit from changing data types?
    - yes, [age] from float64 to int16

        4.4.1) Indicate possible data type changes, in the report.
        - yes, on the beginner needs we observe changes only for age info.

5) Save the dataframe as ‘NSMES1988_updated.csv’ file in the local space for future use.
- yes.

6) Perform basic statistical analysis on your dataframe and generate a brief report on the outcome.
- research:
-- 1) https://pandas.pydata.org/docs/getting_started/intro_tutorials/06_calculate_statistics.html
-- 2) JD_02_Pandas_DataFrame.ipynb
-- 3) https://pandas.pydata.org/docs/user_guide/basics.html#essential-basic-functionality
-- 4) https://pandas.pydata.org/docs/getting_started/intro_tutorials/06_calculate_statistics.html

7) Invoke describe command on the dataframe and compare that with the basic statistical  analysis done in the previous step.
- yes.

8) Indicate which of the columns are not eligible for statistical analysis.
- ['health', 'adl', 'region', 'gender', 'married', 'employed', 'insurance', 'medicaid']
- all this columns dtypes=object

9) Prepare a brief report and enter it in the markdown cells of a JupyterLab Notebook.
- *Data Analysis Summary Report - NSMES1988*
- - Overview
- - The NSMES1988 dataset consists of 4406 entries across 19 columns, combining numeric and categorical data.
- - Our analysis focused on data integrity, memory optimization, and key statistical insights.
- *Key Findings*
-- No missing values were detected.
-- Memory optimization: Changing age from float64 to int16 reduced memory usage from 654.1 KB to 628.3 KB.
-- Column adjustments:
-- Renamed Unnamed: 0 --> id for clarity.
-- Scaled age (x10) and income (x10,000) for better granularity.
Statistical Insights
-- Mean, Median, Standard Deviation were computed for all numeric columns, providing essential distribution insights.
-- Income anomaly detected: Minimum income was [ -10125.0, -10125.0, -8180.0], suggesting possible data entry errors or negative values needing investigation.
-- Categorical columns excluded from direct statistical analysis but analyzed using frequency counts (value_counts()).
- *Next Steps*
-- Validate income anomalies for negative values.
-- Explore correlations between health status, income, and hospital stays.
-- Use visualizations for deeper trend analysis.
- *The refined dataset, NSMES1988_updated.csv, has been saved for future analysis.*

# Task B
"""

# 1) Import Data-Viz libraries
import matplotlib.pyplot as plt
import seaborn as sns

# 2) Generate a plot depicting the relative number of people who were insured vs not insured
df['insurance'].value_counts().plot(kind='bar')
plt.title("Number of insured vs not insured") #- https://matplotlib.org/stable/plot_types/basic/bar.html#sphx-glr-plot-types-basic-bar-py
plt.xlabel("Insurance")
plt.ylabel("Number of people")
plt.xticks(rotation=0)
plt.show()

# 2.1) Make sure to document your findings

# 3) Generate plots depicting the correlation (if any) between a given type of hospital visit and the health of individuals.
# 3.1) I.e. Do people with health category, x, visit the hospital in a given manner more, the same, or less often than people in health category, y, typed people?
# 3.2) Make sure to document your findings

# Compute mean values for each hospital visit type grouped by health status
mean_visits = df.groupby("health")[['visits', 'nvisits', 'ovisits', 'novisits', 'emergency']].mean()

# This switches the Health Status and Visits so the lines are the Health Status - see https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.transpose.html
mean_visits = mean_visits.T

# Define custom tick labels
x_custom_label = ['Physician Visits', 'Non-Physician Visits', 'Hospital Outpatient', 'Non-Physician Outpatient', 'Emergency Room']

# This is the plot (line plot) one for each line (could do a loop instead of one by one) - see https://matplotlib.org/stable/gallery/lines_bars_and_markers/simple_plot.html
plt.figure(figsize=(10, 5))
plt.plot(mean_visits.index, mean_visits['poor'], marker="o", label="Poor")
plt.plot(mean_visits.index, mean_visits['average'], marker="o", label="Average")
plt.plot(mean_visits.index, mean_visits['excellent'], marker="o", label="Excellent")

plt.title("Average Hospital Visits by Health Status")
plt.xlabel("Type of Hospital Visit")
plt.ylabel("Mean Number of Visits")
plt.legend(title="Health Status")
plt.xticks(mean_visits.index, x_custom_label, rotation=35)
plt.grid(True)
plt.show()

# 4) Is there any relationship between income and private insurance? Between income and Medicaid?
# 4.1. A) Make sure to document your findings

# Ensure values are properly formatted
df['insurance'] = df['insurance'].str.strip().str.capitalize()
df['medicaid'] = df['medicaid'].str.strip().str.capitalize()

fig, axes = plt.subplots(1, 2, figsize=(7, 5))  # 1 row, 2 columns

# First scatter plot (Income vs Insurance)
axes[0].scatter(df['insurance'], df['income'])
axes[0].set_title("Income vs Insurance")
axes[0].set_xlabel("Insurance")
axes[0].set_ylabel("Income")

# Second scatter plot (Income vs Medicaid)
axes[1].scatter(df['medicaid'], df['income'])
axes[1].set_title("Income vs Medicaid")
axes[1].set_xlabel("Medicaid")
axes[1].set_ylabel("Income")

# Adjust layout to prevent overlap
plt.tight_layout()
plt.show()

# scatter_plot = plt.figure(figsize=(2, 5))
# plt.scatter(df['insurance'], df['income'])
# plt.title("Income vs Insurance")
# plt.xlabel("Insurance")
# plt.ylabel("Income")
# plt.show()

# scatter_plot = plt.figure(figsize=(2, 5))
# plt.scatter(df['medicaid'], df['income'])
# plt.title("Income vs Medicaid")
# plt.xlabel("Medicaid")
# plt.ylabel("Income")
# plt.show()

# 4) Is there any relationship between income and private insurance? Between income and Medicaid?
# 4.1. B) Make sure to document your findings

# Ensure values are properly formatted
df['insurance'] = df['insurance'].str.strip().str.capitalize()
df['medicaid'] = df['medicaid'].str.strip().str.capitalize()

# Group by insurance and medicaid and compute the mean income
insurance_income = df.groupby('insurance')['income'].mean()
medicaid_income = df.groupby('medicaid')['income'].mean()

# Create the figure
fig, ax = plt.subplots(figsize=(8, 5))

# Plot Insurance Income Data
ax.bar(["Insurance", "Medicaid"], [insurance_income.get("Yes", 0), medicaid_income.get("Yes", 0)],
       label="Yes (Avg Income)", color="black")

ax.bar(["Insurance", "Medicaid"], [insurance_income.get("No", 0), medicaid_income.get("No", 0)],
       label="No (Avg Income)", color="gray",
       bottom=[insurance_income.get("Yes", 0), medicaid_income.get("Yes", 0)])

# Formatting
ax.set_title("Average Income by Insurance & Medicaid Coverage")
ax.set_ylabel("Average Income ($USD)")
ax.legend(title="Coverage Status")

# 4) Is there any relationship between income and private insurance? Between income and Medicaid?
# 4.1. C) Make sure to document your findings

# Ensure values are properly formatted
df['insurance'] = df['insurance'].str.strip().str.lower().str.capitalize()
df['medicaid'] = df['medicaid'].str.strip().str.lower().str.capitalize()

# Create jitter by adding small random noise to the x-values
jitter_strength = 0.1  # Adjust for more or less spreading
insurance_jitter = np.random.uniform(-jitter_strength, jitter_strength, len(df))
medicaid_jitter = np.random.uniform(-jitter_strength, jitter_strength, len(df))

# Create figure
fig, ax = plt.subplots(figsize=(8, 5))

# Scatter plot for Insurance (with jitter)
ax.scatter(df['insurance'].map({'Yes': 1, 'No': 2}) + insurance_jitter, df['income'],
           color="blue", alpha=0.5, label="Private Insurance")

# Scatter plot for Medicaid (with jitter)
ax.scatter(df['medicaid'].map({'Yes': 3, 'No': 4}) + medicaid_jitter, df['income'],
           color="orange", alpha=0.5, label="Medicaid")

# Formatting
ax.set_title("Individual Incomes by Insurance & Medicaid Coverage")
ax.set_xlabel("Coverage Type (Yes/No)")
ax.set_ylabel("Income ($USD)")
ax.legend(title="Coverage Type")
ax.set_xticks([1, 2, 3, 4])
ax.set_xticklabels(["Insurance Yes", "Insurance No", "Medicaid Yes", "Medicaid No"])
plt.grid(True)

plt.show()

# 5) Create 2 or more plots of your choosing that help you tell a story with the data.
# Number of people by gender

df['gender'].value_counts().plot(kind='bar')
plt.title("Number of female vs male")
plt.xlabel("Gender")
plt.ylabel("Number of people")
plt.xticks(rotation=0)
plt.show()

# 5) Create 2 or more plots of your choosing that help you tell a story with the data.
# number of chronic by age by income

# Convert health categories into numeric values
health_mapping = {"poor": 0, "average": 1, "excellent": 2}
df['health_numeric'] = df['health'].map(health_mapping)

# Compute correlation matrix
correlation_matrix = df[['health_numeric', 'visits', 'nvisits', 'ovisits', 'novisits', 'emergency']].corr()

# Plot correlation heatmap
plt.figure(figsize=(8, 6))
sns.heatmap(correlation_matrix, annot=True, cmap="coolwarm", fmt=".2f")

plt.title("Correlation Between Health Status & Hospital Visit Types")
plt.show()

# Compute correlation matrix using Age instead of Health
correlation_matrix = df[['age', 'visits', 'nvisits', 'ovisits', 'novisits', 'emergency']].corr()

# Plot correlation heatmap
plt.figure(figsize=(8, 6))
sns.heatmap(correlation_matrix, annot=True, cmap="coolwarm", fmt=".2f")

plt.title("Correlation Between Age & Hospital Visit Types")
plt.show()

"""# Summary Task B

Task B

1) Import Data-Viz libraries
Yes.

2) Generate a plot depicting the relative number of people who were insured vs not insured
- 2.1) Make sure to document your findings
- - Yes.
- - The number of people insurance yes is more then the number of people with insurance no.

3) Generate plots depicting the correlation (if any) between a given type of hospital visit and the health of individuals.
- 3.1) I.e. Do people with health category, x, visit the hospital in a given manner more, the same, or less often than people in health category, y, typed people?
- 3.2)Make sure to document your findings
- - Yes.
- - More visits on Physician visits, by poor health status
- - People with excellent health status, have low visits.

4)Is there any relationship between income and private insurance? Between income and Medicaid?
- 4.1)Make sure to document your findings
- - Yes.
- - More people with more income, have insurance
- - People with low income, have Medicaid.

5)Create 2 or more plots of your choosing that help you tell a story with the data.
- 5.1)(Experimentation may be required to find something worth reporting on, or just go with your instincts)
- 5.2)This is completely up to your Team
- 5.3)Make sure to document your findings
- 5.4)Make sure there are insights to be learned with your plots
- - Yes.
- - Number of people by gender is more female.

# Task C

Hospital Data Analysis Report

Overview

This analysis examines hospital visit patterns, insurance coverage, and health status across a dataset of 4,406 entries. Using data cleaning, statistical analysis, and visualizations, our team explored relationships between income, insurance, health conditions, and hospital utilization.

Data Preparation:
- Imported necessary Python libraries for data visualization.
- Loaded and cleaned the dataset (NSMES1988.csv).
- Checked for missing values.
- Renamed unclear column names (Unnamed: 0 → id).
- Converted age from float64 to int16 for memory efficiency.


Initial Data Insights:
- Memory usage optimized: Reduced from 654.1 KB to 628.3 KB.
- Income anomaly detected: Some records contained negative income values (-10,125 USD), requiring further validation.
- Categorical columns were analyzed using frequency counts (value_counts()).

Visualization & Exploratory Data Analysis (EDA):

Insurance Coverage:
- Most people in the dataset have insurance, but a notable portion does not.
- Higher income correlates with private insurance coverage, while low-income individuals rely on Medicaid.

Hospital Visits vs. Health Status:
- Individuals with poor health visit the hospital frequently, especially for Physician visits.
- People with excellent health have significantly lower hospital visits.

Gender Distribution:
- More females than males are recorded in the dataset.
- Further analysis needed to determine if gender impacts health status or insurance coverage.
"""